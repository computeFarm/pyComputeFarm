#!/usr/bin/env python

# Register for a class of task and then proceed to run that task sending
# the output back to the requester.

import asyncio
import json
import os
import sys
import yaml

def usage() :
  print('''
usage: worker [configFile]

Start up a task worker

optional positional argument:
  configFile  A path to this worker's YAML configuration file
              (default: ./workerConfig.yaml)
options:
  -h, --help  Show this help message and exit
  ''')
  sys.exit(1)

for anArg in sys.argv :
  if anArg == '-h' or anArg == '--help' :
    usage()

configFile = "workerConfig.yaml"
if 1 < len(sys.argv) :
  configFile = sys.argv[1]

config = {}
try :
  with open(configFile) as yamlFile :
    config = yaml.safe_load(yamlFile.read())
except FileNotFoundError :
  print(f"Could not load the {configFile}")
  sys.exit(1)

if 'workerType' not in config :
  print("Worker configuration MUST include the worker type!")
  sys.exit(1)

if 'taskManager' not in config :
  config['taskManager'] = {}
taskManager = config['taskManager']
if 'host' not in taskManager :
  taskManager['host'] = 'localhost'
if 'port' not in taskManager :
  taskManager['port'] = 8888

if 'cmd' not in config :
  config['cmd'] = {}

cmd = config['cmd']

if 'prefix' not in cmd :
  cmd['prefix'] = []
if type(cmd['prefix']) is str :
  cmd['prefix'] = cmd['prefix'].split()
if type(cmd['prefix']) is not list :
  print("The cmd prefix MUST be either a string or an array")
  sys.exit(1)

if 'suffix' not in cmd :
  cmd['suffix'] = []
if type(cmd['suffix']) is str :
  cmd['suffix'] = cmd['suffix'].split()
if type(cmd['suffix']) is not list :
  print("The cmd suffix MUST be either a string or an array")
  sys.exit(1)

if 'env' not in config :
  config['env'] = {}
if type(config['env']) is not dict :
  print("The env MUST be a dictionary")
  sys.exit(1)

if 'verbose' in config :
  print("Worker configuration:\n---")
  print(yaml.dump(config))
  print("---")

async def tcpWorker(config) :
  workerType = config['workerType']
  print(f"Starting [{workerType}] worker")

  reader, writer = await asyncio.open_connection(
    config['taskManager']['host'],
    int(config['taskManager']['port'])
  )

  # send task specialty
  print("Sending task description to taskManager")
  writer.write(json.dumps({
    'type' : 'worker',
    'taskType' : workerType
  }).encode())
  await writer.drain()
  writer.write(b"\n")
  await writer.drain()

  # wait for task request
  print("Waiting for responses...")
  taskRequestJson = await reader.readuntil()
  taskRequest = {}
  if taskRequestJson :
    taskRequest = json.loads(taskRequestJson.decode())

  if 'type' in taskRequest and taskRequest['type'] == 'taskRequest' :
    if 'verbose' in config :
      print("\nTask request:\n---")
      print(yaml.dump(taskRequest))
      print("---")

    ###################################################################
    # setup process
    taskDir = '.'
    if 'dir' in taskRequest and taskRequest['dir'] :
      taskDir = taskRequest['dir']

    taskEnv = None
    if ('env' in taskRequest and
       taskRequest['env'] and
       type(taskRequest['env']) == dict) :
      taskEnv = taskRequest['env']
      localEnv = dict(os.environ)
      for aKey, aValue in taskEnv.items() :
        localEnv[aKey] = aValue
      taskEnv = localEnv

    taskCmd = []
    cCmd = config['cmd']
    for anArg in cCmd['prefix'] :
      taskCmd.append(anArg)
    if 'cmd' in taskRequest and type(taskRequest['cmd']) == list :
      tCmd = taskRequest['cmd']
      for anArg in tCmd :
        taskCmd.append(anArg)
    for anArg in cCmd['suffix'] :
      taskCmd.append(anArg)

    if 'verbose' in config :
      print("subprocess cmd: ")
      print(yaml.dump(taskCmd))
      print("subprocess env:")
      print(yaml.dump(taskEnv))
      print("subprocess dir:")
      print(yaml.dump(taskDir))

    proc = await asyncio.create_subprocess_exec(
      *taskCmd,
      stdout=asyncio.subprocess.PIPE,
      stderr=asyncio.subprocess.STDOUT,
      cwd=taskDir,
      env=taskEnv
    )

    ###################################################################
    # echo results
    if 'verbose' in config :
      print("Process stdout/stderr: ")
    procStdOut = proc.stdout
    while not procStdOut.at_eof() :
      aLine = await procStdOut.readline()
      print(f'Sending: [{aLine.decode()}]')
      writer.write(aLine)
      await writer.drain()
      #writer.write(b'\n')
      #await writer.drain()
    print(f"Finished task for [{workerType}]")

  print("Closing the connection")
  writer.close()
  await writer.wait_closed()

if len(sys.argv) < 2 :
  print("Usage: worker <<wokerType>>")
  sys.exit(1)

asyncio.run(tcpWorker(config))
